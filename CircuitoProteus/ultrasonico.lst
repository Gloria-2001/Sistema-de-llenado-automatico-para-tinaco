CCS PCM C Compiler, Version 5.025, 19800               12-dic.-21 17:31

               Filename:   C:\Users\vivis\Documents\ESCOM\QUINTO SEMESTRE ESCOM\Instrumentación\Sistema-de-llenado-automatico-para-tinaco\CircuitoProteus\ultrasonico.lst

               ROM used:   1483 words (18%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           48 (13%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   49A
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0D,2A
0005:  DATA 69,37
0006:  DATA E1,31
0007:  DATA 6F,10
0008:  DATA F6,30
0009:  DATA E3,34
000A:  DATA 6F,05
000B:  DATA 00,00
000C:  DATA 0D,2A
000D:  DATA 69,37
000E:  DATA E1,31
000F:  DATA 6F,10
0010:  DATA 6C,36
0011:  DATA 65,37
0012:  DATA 6F,05
0013:  DATA 00,00
0014:  MOVLW  8E
0015:  MOVWF  77
0016:  MOVF   32,W
0017:  MOVWF  78
0018:  MOVF   31,W
0019:  MOVWF  79
001A:  CLRF   7A
001B:  MOVF   78,F
001C:  BTFSS  03.2
001D:  GOTO   028
001E:  MOVF   79,W
001F:  MOVWF  78
0020:  CLRF   79
0021:  MOVLW  08
0022:  SUBWF  77,F
0023:  MOVF   78,F
0024:  BTFSS  03.2
0025:  GOTO   028
0026:  CLRF   77
0027:  GOTO   030
0028:  BCF    03.0
0029:  BTFSC  78.7
002A:  GOTO   02F
002B:  RLF    79,F
002C:  RLF    78,F
002D:  DECF   77,F
002E:  GOTO   028
002F:  BCF    78.7
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   4FD (RETURN)
0033:  MOVF   31,W
0034:  BTFSC  03.2
0035:  GOTO   0F8
0036:  MOVWF  3D
0037:  MOVF   35,W
0038:  BTFSC  03.2
0039:  GOTO   0F8
003A:  SUBWF  3D,F
003B:  BTFSS  03.0
003C:  GOTO   042
003D:  MOVLW  7F
003E:  ADDWF  3D,F
003F:  BTFSC  03.0
0040:  GOTO   0F8
0041:  GOTO   048
0042:  MOVLW  81
0043:  SUBWF  3D,F
0044:  BTFSS  03.0
0045:  GOTO   0F8
0046:  BTFSC  03.2
0047:  GOTO   0F8
0048:  MOVF   3D,W
0049:  MOVWF  77
004A:  CLRF   78
004B:  CLRF   79
004C:  CLRF   7A
004D:  CLRF   3C
004E:  MOVF   32,W
004F:  MOVWF  3B
0050:  BSF    3B.7
0051:  MOVF   33,W
0052:  MOVWF  3A
0053:  MOVF   34,W
0054:  MOVWF  39
0055:  MOVLW  19
0056:  MOVWF  3D
0057:  MOVF   38,W
0058:  SUBWF  39,F
0059:  BTFSC  03.0
005A:  GOTO   06B
005B:  MOVLW  01
005C:  SUBWF  3A,F
005D:  BTFSC  03.0
005E:  GOTO   06B
005F:  SUBWF  3B,F
0060:  BTFSC  03.0
0061:  GOTO   06B
0062:  SUBWF  3C,F
0063:  BTFSC  03.0
0064:  GOTO   06B
0065:  INCF   3C,F
0066:  INCF   3B,F
0067:  INCF   3A,F
0068:  MOVF   38,W
0069:  ADDWF  39,F
006A:  GOTO   09D
006B:  MOVF   37,W
006C:  SUBWF  3A,F
006D:  BTFSC  03.0
006E:  GOTO   086
006F:  MOVLW  01
0070:  SUBWF  3B,F
0071:  BTFSC  03.0
0072:  GOTO   086
0073:  SUBWF  3C,F
0074:  BTFSC  03.0
0075:  GOTO   086
0076:  INCF   3C,F
0077:  INCF   3B,F
0078:  MOVF   37,W
0079:  ADDWF  3A,F
007A:  MOVF   38,W
007B:  ADDWF  39,F
007C:  BTFSS  03.0
007D:  GOTO   09D
007E:  INCF   3A,F
007F:  BTFSS  03.2
0080:  GOTO   09D
0081:  INCF   3B,F
0082:  BTFSS  03.2
0083:  GOTO   09D
0084:  INCF   3C,F
0085:  GOTO   09D
0086:  MOVF   36,W
0087:  IORLW  80
0088:  SUBWF  3B,F
0089:  BTFSC  03.0
008A:  GOTO   09C
008B:  MOVLW  01
008C:  SUBWF  3C,F
008D:  BTFSC  03.0
008E:  GOTO   09C
008F:  INCF   3C,F
0090:  MOVF   36,W
0091:  IORLW  80
0092:  ADDWF  3B,F
0093:  MOVF   37,W
0094:  ADDWF  3A,F
0095:  BTFSS  03.0
0096:  GOTO   07A
0097:  INCF   3B,F
0098:  BTFSS  03.2
0099:  GOTO   07A
009A:  INCF   3C,F
009B:  GOTO   07A
009C:  BSF    7A.0
009D:  DECFSZ 3D,F
009E:  GOTO   0A0
009F:  GOTO   0AB
00A0:  BCF    03.0
00A1:  RLF    39,F
00A2:  RLF    3A,F
00A3:  RLF    3B,F
00A4:  RLF    3C,F
00A5:  BCF    03.0
00A6:  RLF    7A,F
00A7:  RLF    79,F
00A8:  RLF    78,F
00A9:  RLF    3E,F
00AA:  GOTO   057
00AB:  BTFSS  3E.0
00AC:  GOTO   0B3
00AD:  BCF    03.0
00AE:  RRF    78,F
00AF:  RRF    79,F
00B0:  RRF    7A,F
00B1:  RRF    3E,F
00B2:  GOTO   0B6
00B3:  DECF   77,F
00B4:  BTFSC  03.2
00B5:  GOTO   0F8
00B6:  BTFSC  3E.7
00B7:  GOTO   0DF
00B8:  BCF    03.0
00B9:  RLF    39,F
00BA:  RLF    3A,F
00BB:  RLF    3B,F
00BC:  RLF    3C,F
00BD:  MOVF   38,W
00BE:  SUBWF  39,F
00BF:  BTFSC  03.0
00C0:  GOTO   0CB
00C1:  MOVLW  01
00C2:  SUBWF  3A,F
00C3:  BTFSC  03.0
00C4:  GOTO   0CB
00C5:  SUBWF  3B,F
00C6:  BTFSC  03.0
00C7:  GOTO   0CB
00C8:  SUBWF  3C,F
00C9:  BTFSS  03.0
00CA:  GOTO   0EE
00CB:  MOVF   37,W
00CC:  SUBWF  3A,F
00CD:  BTFSC  03.0
00CE:  GOTO   0D6
00CF:  MOVLW  01
00D0:  SUBWF  3B,F
00D1:  BTFSC  03.0
00D2:  GOTO   0D6
00D3:  SUBWF  3C,F
00D4:  BTFSS  03.0
00D5:  GOTO   0EE
00D6:  MOVF   36,W
00D7:  IORLW  80
00D8:  SUBWF  3B,F
00D9:  BTFSC  03.0
00DA:  GOTO   0DF
00DB:  MOVLW  01
00DC:  SUBWF  3C,F
00DD:  BTFSS  03.0
00DE:  GOTO   0EE
00DF:  INCF   7A,F
00E0:  BTFSS  03.2
00E1:  GOTO   0EE
00E2:  INCF   79,F
00E3:  BTFSS  03.2
00E4:  GOTO   0EE
00E5:  INCF   78,F
00E6:  BTFSS  03.2
00E7:  GOTO   0EE
00E8:  INCF   77,F
00E9:  BTFSC  03.2
00EA:  GOTO   0F8
00EB:  RRF    78,F
00EC:  RRF    79,F
00ED:  RRF    7A,F
00EE:  MOVF   32,W
00EF:  MOVWF  3D
00F0:  MOVF   36,W
00F1:  XORWF  3D,F
00F2:  BTFSS  3D.7
00F3:  GOTO   0F6
00F4:  BSF    78.7
00F5:  GOTO   0FC
00F6:  BCF    78.7
00F7:  GOTO   0FC
00F8:  CLRF   77
00F9:  CLRF   78
00FA:  CLRF   79
00FB:  CLRF   7A
00FC:  BCF    0A.3
00FD:  BCF    0A.4
00FE:  GOTO   513 (RETURN)
00FF:  MOVF   3E,W
0100:  BTFSC  03.2
0101:  GOTO   16F
0102:  MOVWF  46
0103:  MOVF   42,W
0104:  BTFSC  03.2
0105:  GOTO   16F
0106:  ADDWF  46,F
0107:  BTFSC  03.0
0108:  GOTO   110
0109:  MOVLW  7F
010A:  SUBWF  46,F
010B:  BTFSS  03.0
010C:  GOTO   16F
010D:  BTFSC  03.2
010E:  GOTO   16F
010F:  GOTO   114
0110:  MOVLW  81
0111:  ADDWF  46,F
0112:  BTFSC  03.0
0113:  GOTO   16F
0114:  MOVF   46,W
0115:  MOVWF  77
0116:  CLRF   78
0117:  CLRF   79
0118:  CLRF   7A
0119:  MOVF   3F,W
011A:  MOVWF  4A
011B:  BSF    4A.7
011C:  MOVF   40,W
011D:  MOVWF  49
011E:  MOVF   41,W
011F:  MOVWF  48
0120:  MOVLW  18
0121:  MOVWF  46
0122:  CLRF   47
0123:  BTFSS  48.0
0124:  GOTO   13D
0125:  MOVF   45,W
0126:  ADDWF  7A,F
0127:  BTFSS  03.0
0128:  GOTO   12F
0129:  INCF   79,F
012A:  BTFSS  03.2
012B:  GOTO   12F
012C:  INCF   78,F
012D:  BTFSC  03.2
012E:  BSF    47.7
012F:  MOVF   44,W
0130:  ADDWF  79,F
0131:  BTFSS  03.0
0132:  GOTO   136
0133:  INCF   78,F
0134:  BTFSC  03.2
0135:  BSF    47.7
0136:  MOVF   43,W
0137:  MOVWF  40
0138:  BSF    40.7
0139:  MOVF   40,W
013A:  ADDWF  78,F
013B:  BTFSC  03.0
013C:  BSF    47.7
013D:  RLF    47,F
013E:  RRF    78,F
013F:  RRF    79,F
0140:  RRF    7A,F
0141:  RRF    4A,F
0142:  RRF    49,F
0143:  RRF    48,F
0144:  BCF    03.0
0145:  DECFSZ 46,F
0146:  GOTO   122
0147:  MOVLW  01
0148:  ADDWF  77,F
0149:  BTFSC  03.0
014A:  GOTO   16F
014B:  BTFSC  78.7
014C:  GOTO   154
014D:  RLF    4A,F
014E:  RLF    7A,F
014F:  RLF    79,F
0150:  RLF    78,F
0151:  DECF   77,F
0152:  BTFSC  03.2
0153:  GOTO   16F
0154:  BTFSS  4A.7
0155:  GOTO   165
0156:  INCF   7A,F
0157:  BTFSS  03.2
0158:  GOTO   165
0159:  INCF   79,F
015A:  BTFSS  03.2
015B:  GOTO   165
015C:  INCF   78,F
015D:  BTFSS  03.2
015E:  GOTO   165
015F:  RRF    78,F
0160:  RRF    79,F
0161:  RRF    7A,F
0162:  INCF   77,F
0163:  BTFSC  03.2
0164:  GOTO   16F
0165:  MOVF   3F,W
0166:  MOVWF  47
0167:  MOVF   43,W
0168:  XORWF  47,F
0169:  BTFSS  47.7
016A:  GOTO   16D
016B:  BSF    78.7
016C:  GOTO   173
016D:  BCF    78.7
016E:  GOTO   173
016F:  CLRF   77
0170:  CLRF   78
0171:  CLRF   79
0172:  CLRF   7A
0173:  RETURN
0174:  MOVF   32,W
0175:  MOVWF  39
0176:  MOVF   36,W
0177:  XORWF  39,F
0178:  BTFSS  39.7
0179:  GOTO   17F
017A:  BCF    03.2
017B:  BCF    03.0
017C:  BTFSC  32.7
017D:  BSF    03.0
017E:  GOTO   1B2
017F:  MOVF   32,W
0180:  MOVWF  39
0181:  MOVF   35,W
0182:  MOVWF  3A
0183:  MOVF   31,W
0184:  SUBWF  3A,F
0185:  BTFSC  03.2
0186:  GOTO   18D
0187:  BTFSS  39.7
0188:  GOTO   1B2
0189:  MOVF   03,W
018A:  XORLW  01
018B:  MOVWF  03
018C:  GOTO   1B2
018D:  MOVF   36,W
018E:  MOVWF  3A
018F:  MOVF   32,W
0190:  SUBWF  3A,F
0191:  BTFSC  03.2
0192:  GOTO   199
0193:  BTFSS  39.7
0194:  GOTO   1B2
0195:  MOVF   03,W
0196:  XORLW  01
0197:  MOVWF  03
0198:  GOTO   1B2
0199:  MOVF   37,W
019A:  MOVWF  3A
019B:  MOVF   33,W
019C:  SUBWF  3A,F
019D:  BTFSC  03.2
019E:  GOTO   1A5
019F:  BTFSS  39.7
01A0:  GOTO   1B2
01A1:  MOVF   03,W
01A2:  XORLW  01
01A3:  MOVWF  03
01A4:  GOTO   1B2
01A5:  MOVF   38,W
01A6:  MOVWF  3A
01A7:  MOVF   34,W
01A8:  SUBWF  3A,F
01A9:  BTFSC  03.2
01AA:  GOTO   1B1
01AB:  BTFSS  39.7
01AC:  GOTO   1B2
01AD:  MOVF   03,W
01AE:  XORLW  01
01AF:  MOVWF  03
01B0:  GOTO   1B2
01B1:  BCF    03.0
01B2:  RETURN
01B3:  MOVLW  80
01B4:  BTFSC  03.1
01B5:  XORWF  36,F
01B6:  CLRF   3B
01B7:  CLRF   3C
01B8:  MOVF   32,W
01B9:  MOVWF  3A
01BA:  MOVF   36,W
01BB:  XORWF  3A,F
01BC:  MOVF   31,W
01BD:  BTFSC  03.2
01BE:  GOTO   2A3
01BF:  MOVWF  39
01C0:  MOVWF  77
01C1:  MOVF   35,W
01C2:  BTFSC  03.2
01C3:  GOTO   2AC
01C4:  SUBWF  39,F
01C5:  BTFSC  03.2
01C6:  GOTO   248
01C7:  BTFSS  03.0
01C8:  GOTO   206
01C9:  MOVF   36,W
01CA:  MOVWF  3F
01CB:  BSF    3F.7
01CC:  MOVF   37,W
01CD:  MOVWF  3E
01CE:  MOVF   38,W
01CF:  MOVWF  3D
01D0:  CLRF   3C
01D1:  BCF    03.0
01D2:  RRF    3F,F
01D3:  RRF    3E,F
01D4:  RRF    3D,F
01D5:  RRF    3C,F
01D6:  DECFSZ 39,F
01D7:  GOTO   1D0
01D8:  BTFSS  3A.7
01D9:  GOTO   1DD
01DA:  BSF    3B.0
01DB:  GOTO   2C0
01DC:  BCF    3B.0
01DD:  BCF    39.0
01DE:  BSF    3B.4
01DF:  MOVLW  34
01E0:  MOVWF  04
01E1:  BCF    03.7
01E2:  GOTO   2D5
01E3:  BCF    3B.4
01E4:  BTFSC  3A.7
01E5:  GOTO   1F0
01E6:  BTFSS  39.0
01E7:  GOTO   1FB
01E8:  RRF    3F,F
01E9:  RRF    3E,F
01EA:  RRF    3D,F
01EB:  RRF    3C,F
01EC:  INCF   77,F
01ED:  BTFSC  03.2
01EE:  GOTO   2BB
01EF:  GOTO   1FB
01F0:  BTFSC  3F.7
01F1:  GOTO   1FE
01F2:  BCF    03.0
01F3:  RLF    3C,F
01F4:  RLF    3D,F
01F5:  RLF    3E,F
01F6:  RLF    3F,F
01F7:  DECF   77,F
01F8:  BTFSC  03.2
01F9:  GOTO   2BB
01FA:  GOTO   1F0
01FB:  BSF    3B.6
01FC:  GOTO   268
01FD:  BCF    3B.6
01FE:  MOVF   32,W
01FF:  MOVWF  3A
0200:  BTFSS  3A.7
0201:  GOTO   204
0202:  BSF    3F.7
0203:  GOTO   2B4
0204:  BCF    3F.7
0205:  GOTO   2B4
0206:  MOVF   35,W
0207:  MOVWF  39
0208:  MOVWF  77
0209:  MOVF   31,W
020A:  SUBWF  39,F
020B:  MOVF   32,W
020C:  MOVWF  3F
020D:  BSF    3F.7
020E:  MOVF   33,W
020F:  MOVWF  3E
0210:  MOVF   34,W
0211:  MOVWF  3D
0212:  CLRF   3C
0213:  BCF    03.0
0214:  RRF    3F,F
0215:  RRF    3E,F
0216:  RRF    3D,F
0217:  RRF    3C,F
0218:  DECFSZ 39,F
0219:  GOTO   212
021A:  BTFSS  3A.7
021B:  GOTO   21F
021C:  BSF    3B.1
021D:  GOTO   2C0
021E:  BCF    3B.1
021F:  BCF    39.0
0220:  BSF    3B.5
0221:  MOVLW  38
0222:  MOVWF  04
0223:  BCF    03.7
0224:  GOTO   2D5
0225:  BCF    3B.5
0226:  BTFSC  3A.7
0227:  GOTO   232
0228:  BTFSS  39.0
0229:  GOTO   23D
022A:  RRF    3F,F
022B:  RRF    3E,F
022C:  RRF    3D,F
022D:  RRF    3C,F
022E:  INCF   77,F
022F:  BTFSC  03.2
0230:  GOTO   2BB
0231:  GOTO   23D
0232:  BTFSC  3F.7
0233:  GOTO   240
0234:  BCF    03.0
0235:  RLF    3C,F
0236:  RLF    3D,F
0237:  RLF    3E,F
0238:  RLF    3F,F
0239:  DECF   77,F
023A:  BTFSC  03.2
023B:  GOTO   2BB
023C:  GOTO   232
023D:  BSF    3B.7
023E:  GOTO   268
023F:  BCF    3B.7
0240:  MOVF   36,W
0241:  MOVWF  3A
0242:  BTFSS  3A.7
0243:  GOTO   246
0244:  BSF    3F.7
0245:  GOTO   2B4
0246:  BCF    3F.7
0247:  GOTO   2B4
0248:  MOVF   36,W
0249:  MOVWF  3F
024A:  BSF    3F.7
024B:  MOVF   37,W
024C:  MOVWF  3E
024D:  MOVF   38,W
024E:  MOVWF  3D
024F:  BTFSS  3A.7
0250:  GOTO   255
0251:  BCF    3F.7
0252:  BSF    3B.2
0253:  GOTO   2C0
0254:  BCF    3B.2
0255:  CLRF   3C
0256:  BCF    39.0
0257:  MOVLW  34
0258:  MOVWF  04
0259:  BCF    03.7
025A:  GOTO   2D5
025B:  BTFSC  3A.7
025C:  GOTO   27E
025D:  MOVF   32,W
025E:  MOVWF  3A
025F:  BTFSS  39.0
0260:  GOTO   268
0261:  RRF    3F,F
0262:  RRF    3E,F
0263:  RRF    3D,F
0264:  RRF    3C,F
0265:  INCF   77,F
0266:  BTFSC  03.2
0267:  GOTO   2BB
0268:  BTFSS  3C.7
0269:  GOTO   279
026A:  INCF   3D,F
026B:  BTFSS  03.2
026C:  GOTO   279
026D:  INCF   3E,F
026E:  BTFSS  03.2
026F:  GOTO   279
0270:  INCF   3F,F
0271:  BTFSS  03.2
0272:  GOTO   279
0273:  RRF    3F,F
0274:  RRF    3E,F
0275:  RRF    3D,F
0276:  INCF   77,F
0277:  BTFSC  03.2
0278:  GOTO   2BB
0279:  BTFSC  3B.6
027A:  GOTO   1FD
027B:  BTFSC  3B.7
027C:  GOTO   23F
027D:  GOTO   29D
027E:  MOVLW  80
027F:  XORWF  3F,F
0280:  BTFSS  3F.7
0281:  GOTO   286
0282:  GOTO   2C0
0283:  MOVF   36,W
0284:  MOVWF  3A
0285:  GOTO   293
0286:  MOVF   32,W
0287:  MOVWF  3A
0288:  MOVF   3F,F
0289:  BTFSS  03.2
028A:  GOTO   293
028B:  MOVF   3E,F
028C:  BTFSS  03.2
028D:  GOTO   293
028E:  MOVF   3D,F
028F:  BTFSS  03.2
0290:  GOTO   293
0291:  CLRF   77
0292:  GOTO   2B4
0293:  BTFSC  3F.7
0294:  GOTO   29D
0295:  BCF    03.0
0296:  RLF    3C,F
0297:  RLF    3D,F
0298:  RLF    3E,F
0299:  RLF    3F,F
029A:  DECFSZ 77,F
029B:  GOTO   293
029C:  GOTO   2BB
029D:  BTFSS  3A.7
029E:  GOTO   2A1
029F:  BSF    3F.7
02A0:  GOTO   2B4
02A1:  BCF    3F.7
02A2:  GOTO   2B4
02A3:  MOVF   35,W
02A4:  MOVWF  77
02A5:  MOVF   36,W
02A6:  MOVWF  3F
02A7:  MOVF   37,W
02A8:  MOVWF  3E
02A9:  MOVF   38,W
02AA:  MOVWF  3D
02AB:  GOTO   2B4
02AC:  MOVF   31,W
02AD:  MOVWF  77
02AE:  MOVF   32,W
02AF:  MOVWF  3F
02B0:  MOVF   33,W
02B1:  MOVWF  3E
02B2:  MOVF   34,W
02B3:  MOVWF  3D
02B4:  MOVF   3F,W
02B5:  MOVWF  78
02B6:  MOVF   3E,W
02B7:  MOVWF  79
02B8:  MOVF   3D,W
02B9:  MOVWF  7A
02BA:  GOTO   2F3
02BB:  CLRF   77
02BC:  CLRF   78
02BD:  CLRF   79
02BE:  CLRF   7A
02BF:  GOTO   2F3
02C0:  CLRF   3C
02C1:  COMF   3D,F
02C2:  COMF   3E,F
02C3:  COMF   3F,F
02C4:  COMF   3C,F
02C5:  INCF   3C,F
02C6:  BTFSS  03.2
02C7:  GOTO   2CE
02C8:  INCF   3D,F
02C9:  BTFSS  03.2
02CA:  GOTO   2CE
02CB:  INCF   3E,F
02CC:  BTFSC  03.2
02CD:  INCF   3F,F
02CE:  BTFSC  3B.0
02CF:  GOTO   1DC
02D0:  BTFSC  3B.1
02D1:  GOTO   21E
02D2:  BTFSC  3B.2
02D3:  GOTO   254
02D4:  GOTO   283
02D5:  MOVF   00,W
02D6:  ADDWF  3D,F
02D7:  BTFSS  03.0
02D8:  GOTO   2DF
02D9:  INCF   3E,F
02DA:  BTFSS  03.2
02DB:  GOTO   2DF
02DC:  INCF   3F,F
02DD:  BTFSC  03.2
02DE:  BSF    39.0
02DF:  DECF   04,F
02E0:  MOVF   00,W
02E1:  ADDWF  3E,F
02E2:  BTFSS  03.0
02E3:  GOTO   2E7
02E4:  INCF   3F,F
02E5:  BTFSC  03.2
02E6:  BSF    39.0
02E7:  DECF   04,F
02E8:  MOVF   00,W
02E9:  BTFSS  00.7
02EA:  XORLW  80
02EB:  ADDWF  3F,F
02EC:  BTFSC  03.0
02ED:  BSF    39.0
02EE:  BTFSC  3B.4
02EF:  GOTO   1E3
02F0:  BTFSC  3B.5
02F1:  GOTO   225
02F2:  GOTO   25B
02F3:  BCF    0A.3
02F4:  BCF    0A.4
02F5:  GOTO   557 (RETURN)
02F6:  BTFSC  03.1
02F7:  GOTO   2FB
02F8:  MOVLW  46
02F9:  MOVWF  04
02FA:  BCF    03.7
02FB:  CLRF   77
02FC:  CLRF   78
02FD:  CLRF   79
02FE:  CLRF   7A
02FF:  CLRF   46
0300:  CLRF   47
0301:  CLRF   48
0302:  CLRF   49
0303:  MOVF   45,W
0304:  IORWF  44,W
0305:  IORWF  43,W
0306:  IORWF  42,W
0307:  BTFSC  03.2
0308:  GOTO   339
0309:  MOVLW  20
030A:  MOVWF  4A
030B:  BCF    03.0
030C:  RLF    3E,F
030D:  RLF    3F,F
030E:  RLF    40,F
030F:  RLF    41,F
0310:  RLF    46,F
0311:  RLF    47,F
0312:  RLF    48,F
0313:  RLF    49,F
0314:  MOVF   45,W
0315:  SUBWF  49,W
0316:  BTFSS  03.2
0317:  GOTO   322
0318:  MOVF   44,W
0319:  SUBWF  48,W
031A:  BTFSS  03.2
031B:  GOTO   322
031C:  MOVF   43,W
031D:  SUBWF  47,W
031E:  BTFSS  03.2
031F:  GOTO   322
0320:  MOVF   42,W
0321:  SUBWF  46,W
0322:  BTFSS  03.0
0323:  GOTO   333
0324:  MOVF   42,W
0325:  SUBWF  46,F
0326:  MOVF   43,W
0327:  BTFSS  03.0
0328:  INCFSZ 43,W
0329:  SUBWF  47,F
032A:  MOVF   44,W
032B:  BTFSS  03.0
032C:  INCFSZ 44,W
032D:  SUBWF  48,F
032E:  MOVF   45,W
032F:  BTFSS  03.0
0330:  INCFSZ 45,W
0331:  SUBWF  49,F
0332:  BSF    03.0
0333:  RLF    77,F
0334:  RLF    78,F
0335:  RLF    79,F
0336:  RLF    7A,F
0337:  DECFSZ 4A,F
0338:  GOTO   30B
0339:  MOVF   46,W
033A:  MOVWF  00
033B:  INCF   04,F
033C:  MOVF   47,W
033D:  MOVWF  00
033E:  INCF   04,F
033F:  MOVF   48,W
0340:  MOVWF  00
0341:  INCF   04,F
0342:  MOVF   49,W
0343:  MOVWF  00
0344:  RETURN
0345:  MOVF   04,W
0346:  MOVWF  36
0347:  MOVF   35,W
0348:  MOVWF  38
0349:  BTFSC  03.2
034A:  GOTO   364
034B:  MOVF   34,W
034C:  MOVWF  41
034D:  MOVF   33,W
034E:  MOVWF  40
034F:  MOVF   32,W
0350:  MOVWF  3F
0351:  MOVF   31,W
0352:  MOVWF  3E
0353:  CLRF   45
0354:  CLRF   44
0355:  MOVLW  20
0356:  MOVWF  43
0357:  MOVLW  82
0358:  MOVWF  42
0359:  CALL   0FF
035A:  MOVF   7A,W
035B:  MOVWF  34
035C:  MOVF   79,W
035D:  MOVWF  33
035E:  MOVF   78,W
035F:  MOVWF  32
0360:  MOVF   77,W
0361:  MOVWF  31
0362:  DECFSZ 38,F
0363:  GOTO   34B
0364:  MOVF   34,W
0365:  MOVWF  41
0366:  MOVF   33,W
0367:  MOVWF  40
0368:  MOVF   32,W
0369:  MOVWF  3F
036A:  MOVF   31,W
036B:  MOVWF  3E
036C:  MOVF   3E,W
036D:  SUBLW  B6
036E:  MOVWF  3E
036F:  CLRF   7A
0370:  MOVF   3F,W
0371:  MOVWF  42
0372:  BSF    3F.7
0373:  BCF    03.0
0374:  RRF    3F,F
0375:  RRF    40,F
0376:  RRF    41,F
0377:  RRF    7A,F
0378:  RRF    79,F
0379:  RRF    78,F
037A:  RRF    77,F
037B:  DECFSZ 3E,F
037C:  GOTO   373
037D:  BTFSS  42.7
037E:  GOTO   38A
037F:  COMF   77,F
0380:  COMF   78,F
0381:  COMF   79,F
0382:  COMF   7A,F
0383:  INCF   77,F
0384:  BTFSC  03.2
0385:  INCF   78,F
0386:  BTFSC  03.2
0387:  INCF   79,F
0388:  BTFSC  03.2
0389:  INCF   7A,F
038A:  MOVF   7A,W
038B:  MOVWF  34
038C:  MOVF   79,W
038D:  MOVWF  33
038E:  MOVF   78,W
038F:  MOVWF  32
0390:  MOVF   77,W
0391:  MOVWF  31
0392:  BTFSS  34.7
0393:  GOTO   3A1
0394:  DECF   36,F
0395:  BSF    36.5
0396:  COMF   31,F
0397:  COMF   32,F
0398:  COMF   33,F
0399:  COMF   34,F
039A:  INCF   31,F
039B:  BTFSC  03.2
039C:  INCF   32,F
039D:  BTFSC  03.2
039E:  INCF   33,F
039F:  BTFSC  03.2
03A0:  INCF   34,F
03A1:  MOVLW  3B
03A2:  MOVWF  3D
03A3:  MOVLW  9A
03A4:  MOVWF  3C
03A5:  MOVLW  CA
03A6:  MOVWF  3B
03A7:  CLRF   3A
03A8:  MOVLW  0A
03A9:  MOVWF  38
03AA:  MOVF   35,W
03AB:  BTFSC  03.2
03AC:  INCF   36,F
03AD:  BSF    03.1
03AE:  MOVLW  31
03AF:  MOVWF  04
03B0:  BCF    03.7
03B1:  MOVF   34,W
03B2:  MOVWF  41
03B3:  MOVF   33,W
03B4:  MOVWF  40
03B5:  MOVF   32,W
03B6:  MOVWF  3F
03B7:  MOVF   31,W
03B8:  MOVWF  3E
03B9:  MOVF   3D,W
03BA:  MOVWF  45
03BB:  MOVF   3C,W
03BC:  MOVWF  44
03BD:  MOVF   3B,W
03BE:  MOVWF  43
03BF:  MOVF   3A,W
03C0:  MOVWF  42
03C1:  CALL   2F6
03C2:  MOVF   78,W
03C3:  MOVF   77,F
03C4:  BTFSS  03.2
03C5:  GOTO   3D9
03C6:  INCF   35,W
03C7:  SUBWF  38,W
03C8:  BTFSC  03.2
03C9:  GOTO   3D9
03CA:  MOVF   36,W
03CB:  BTFSC  03.2
03CC:  GOTO   3DB
03CD:  ANDLW  0F
03CE:  SUBWF  38,W
03CF:  BTFSC  03.2
03D0:  GOTO   3D3
03D1:  BTFSC  03.0
03D2:  GOTO   40F
03D3:  BTFSC  36.7
03D4:  GOTO   40F
03D5:  BTFSC  36.6
03D6:  GOTO   3DB
03D7:  MOVLW  20
03D8:  GOTO   40A
03D9:  MOVLW  20
03DA:  ANDWF  36,F
03DB:  BTFSS  36.5
03DC:  GOTO   3EA
03DD:  BCF    36.5
03DE:  MOVF   35,W
03DF:  BTFSS  03.2
03E0:  DECF   36,F
03E1:  MOVF   77,W
03E2:  MOVWF  36
03E3:  MOVLW  2D
03E4:  BTFSS  0C.4
03E5:  GOTO   3E4
03E6:  MOVWF  19
03E7:  MOVF   36,W
03E8:  MOVWF  77
03E9:  CLRF   36
03EA:  MOVF   35,W
03EB:  SUBWF  38,W
03EC:  BTFSS  03.2
03ED:  GOTO   3F9
03EE:  MOVF   77,W
03EF:  MOVWF  36
03F0:  MOVLW  2E
03F1:  BTFSS  0C.4
03F2:  GOTO   3F1
03F3:  MOVWF  19
03F4:  MOVF   36,W
03F5:  MOVWF  77
03F6:  MOVLW  20
03F7:  ANDWF  36,F
03F8:  MOVLW  00
03F9:  MOVLW  30
03FA:  BTFSS  36.5
03FB:  GOTO   40A
03FC:  BCF    36.5
03FD:  MOVF   35,W
03FE:  BTFSS  03.2
03FF:  DECF   36,F
0400:  MOVF   77,W
0401:  MOVWF  36
0402:  MOVLW  2D
0403:  BTFSS  0C.4
0404:  GOTO   403
0405:  MOVWF  19
0406:  MOVF   36,W
0407:  MOVWF  77
0408:  CLRF   36
0409:  MOVLW  30
040A:  ADDWF  77,F
040B:  MOVF   77,W
040C:  BTFSS  0C.4
040D:  GOTO   40C
040E:  MOVWF  19
040F:  BCF    03.1
0410:  MOVF   3D,W
0411:  MOVWF  41
0412:  MOVF   3C,W
0413:  MOVWF  40
0414:  MOVF   3B,W
0415:  MOVWF  3F
0416:  MOVF   3A,W
0417:  MOVWF  3E
0418:  CLRF   45
0419:  CLRF   44
041A:  CLRF   43
041B:  MOVLW  0A
041C:  MOVWF  42
041D:  CALL   2F6
041E:  MOVF   7A,W
041F:  MOVWF  3D
0420:  MOVF   79,W
0421:  MOVWF  3C
0422:  MOVF   78,W
0423:  MOVWF  3B
0424:  MOVF   77,W
0425:  MOVWF  3A
0426:  DECFSZ 38,F
0427:  GOTO   3AD
0428:  BCF    0A.3
0429:  BCF    0A.4
042A:  GOTO   570 (RETURN)
042B:  MOVF   0B,W
042C:  MOVWF  31
042D:  BCF    0B.7
042E:  BSF    03.5
042F:  BSF    03.6
0430:  BSF    0C.7
0431:  BSF    0C.0
0432:  NOP
0433:  NOP
0434:  BCF    03.5
0435:  BCF    03.6
0436:  BTFSC  31.7
0437:  BSF    0B.7
0438:  BSF    03.6
0439:  MOVF   0C,W
043A:  ANDLW  7F
043B:  BTFSC  03.2
043C:  GOTO   481
043D:  BCF    03.6
043E:  MOVWF  31
043F:  BSF    03.6
0440:  MOVF   0D,W
0441:  BCF    03.6
0442:  MOVWF  32
0443:  BSF    03.6
0444:  MOVF   0F,W
0445:  BCF    03.6
0446:  MOVWF  33
0447:  MOVF   31,W
0448:  BTFSS  0C.4
0449:  GOTO   448
044A:  MOVWF  19
044B:  MOVF   32,W
044C:  BSF    03.6
044D:  MOVWF  0D
044E:  BCF    03.6
044F:  MOVF   33,W
0450:  BSF    03.6
0451:  MOVWF  0F
0452:  BCF    03.6
0453:  MOVF   0B,W
0454:  MOVWF  34
0455:  BCF    0B.7
0456:  BSF    03.5
0457:  BSF    03.6
0458:  BSF    0C.7
0459:  BSF    0C.0
045A:  NOP
045B:  NOP
045C:  BCF    03.5
045D:  BCF    03.6
045E:  BTFSC  34.7
045F:  BSF    0B.7
0460:  BSF    03.6
0461:  RLF    0C,W
0462:  RLF    0E,W
0463:  ANDLW  7F
0464:  BTFSC  03.2
0465:  GOTO   481
0466:  BCF    03.6
0467:  MOVWF  31
0468:  BSF    03.6
0469:  MOVF   0D,W
046A:  BCF    03.6
046B:  MOVWF  32
046C:  BSF    03.6
046D:  MOVF   0F,W
046E:  BCF    03.6
046F:  MOVWF  33
0470:  MOVF   31,W
0471:  BTFSS  0C.4
0472:  GOTO   471
0473:  MOVWF  19
0474:  MOVF   32,W
0475:  BSF    03.6
0476:  MOVWF  0D
0477:  BCF    03.6
0478:  MOVF   33,W
0479:  BSF    03.6
047A:  MOVWF  0F
047B:  INCF   0D,F
047C:  BTFSC  03.2
047D:  INCF   0F,F
047E:  BCF    03.6
047F:  GOTO   42B
0480:  BSF    03.6
0481:  BCF    03.6
0482:  RETURN
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
*
04B5:  BCF    03.5
04B6:  CLRF   20
04B7:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,PUT,BROWNOUT 
.................... #use DELAY (CLOCK=4MHz) 
*
0483:  MOVLW  31
0484:  MOVWF  04
0485:  BCF    03.7
0486:  MOVF   00,W
0487:  BTFSC  03.2
0488:  GOTO   497
0489:  MOVLW  01
048A:  MOVWF  78
048B:  CLRF   77
048C:  DECFSZ 77,F
048D:  GOTO   48C
048E:  DECFSZ 78,F
048F:  GOTO   48B
0490:  MOVLW  4A
0491:  MOVWF  77
0492:  DECFSZ 77,F
0493:  GOTO   492
0494:  GOTO   495
0495:  DECFSZ 00,F
0496:  GOTO   489
0497:  BCF    0A.3
0498:  BCF    0A.4
0499:  GOTO   5C9 (RETURN)
.................... #use rs232 (baud=9600,parity=N,xmit=pin_c6,rcv=pin_c7,bits=8) 
....................  
.................... float distancia,tiempo; 
.................... float aux = -1.00; 
....................  
.................... #define trigger pin_B1 
.................... #define echo pin_B0 
....................  
.................... int Timer2,Postcaler; 
.................... //int16 duty; 
....................  
.................... void main(){ 
049A:  MOVF   03,W
049B:  ANDLW  1F
049C:  MOVWF  03
049D:  MOVLW  19
049E:  BSF    03.5
049F:  MOVWF  19
04A0:  MOVLW  A6
04A1:  MOVWF  18
04A2:  MOVLW  90
04A3:  BCF    03.5
04A4:  MOVWF  18
04A5:  CLRF   2D
04A6:  CLRF   2C
04A7:  MOVLW  80
04A8:  MOVWF  2B
04A9:  MOVLW  7F
04AA:  MOVWF  2A
04AB:  MOVLW  FF
04AC:  MOVWF  30
04AD:  BSF    03.5
04AE:  BSF    1F.0
04AF:  BSF    1F.1
04B0:  BSF    1F.2
04B1:  BCF    1F.3
04B2:  MOVLW  07
04B3:  MOVWF  1C
04B4:  BCF    03.7
....................    setup_timer_1(T1_internal|T1_div_by_1); 
*
04B8:  MOVLW  85
04B9:  MOVWF  10
....................    Timer2=124; 
04BA:  MOVLW  7C
04BB:  MOVWF  2E
....................    Postcaler=1; 
04BC:  MOVLW  01
04BD:  MOVWF  2F
....................    setup_timer_2(t2_div_by_4,Timer2,Postcaler); 
04BE:  SUBWF  2F,W
04BF:  MOVWF  78
04C0:  RLF    78,W
04C1:  MOVWF  77
04C2:  RLF    77,F
04C3:  RLF    77,F
04C4:  MOVLW  F8
04C5:  ANDWF  77,F
04C6:  MOVF   77,W
04C7:  IORLW  05
04C8:  MOVWF  12
04C9:  MOVF   2E,W
04CA:  BSF    03.5
04CB:  MOVWF  12
....................    setup_ccp1(ccp_pwm); 
04CC:  BCF    03.5
04CD:  BCF    30.2
04CE:  MOVF   30,W
04CF:  BSF    03.5
04D0:  MOVWF  07
04D1:  BCF    03.5
04D2:  BCF    07.2
04D3:  MOVLW  0C
04D4:  MOVWF  17
....................    while(true){ 
....................       output_high(trigger); 
04D5:  BSF    03.5
04D6:  BCF    06.1
04D7:  BCF    03.5
04D8:  BSF    06.1
....................       delay_us(10); 
04D9:  MOVLW  02
04DA:  MOVWF  77
04DB:  DECFSZ 77,F
04DC:  GOTO   4DB
04DD:  GOTO   4DE
04DE:  NOP
....................       output_low(trigger); 
04DF:  BSF    03.5
04E0:  BCF    06.1
04E1:  BCF    03.5
04E2:  BCF    06.1
....................        
....................       while(!input(echo)); 
04E3:  BSF    03.5
04E4:  BSF    06.0
04E5:  BCF    03.5
04E6:  BTFSS  06.0
04E7:  GOTO   4E3
....................       set_timer1(0); 
04E8:  CLRF   0E
04E9:  CLRF   0F
04EA:  CLRF   0E
....................        
....................       while(input(echo)); 
04EB:  BSF    03.5
04EC:  BSF    06.0
04ED:  BCF    03.5
04EE:  BTFSC  06.0
04EF:  GOTO   4EB
....................       tiempo = get_timer1(); 
04F0:  MOVF   0F,W
04F1:  MOVWF  7A
04F2:  MOVF   0E,W
04F3:  MOVWF  77
04F4:  MOVF   0F,W
04F5:  SUBWF  7A,W
04F6:  BTFSS  03.2
04F7:  GOTO   4F0
04F8:  MOVF   77,W
04F9:  MOVWF  31
04FA:  MOVF   7A,W
04FB:  MOVWF  32
04FC:  GOTO   014
04FD:  MOVF   7A,W
04FE:  MOVWF  29
04FF:  MOVF   79,W
0500:  MOVWF  28
0501:  MOVF   78,W
0502:  MOVWF  27
0503:  MOVF   77,W
0504:  MOVWF  26
....................       distancia=(tiempo/2)*(0.0343); 
0505:  MOVF   29,W
0506:  MOVWF  34
0507:  MOVF   28,W
0508:  MOVWF  33
0509:  MOVF   27,W
050A:  MOVWF  32
050B:  MOVF   26,W
050C:  MOVWF  31
050D:  CLRF   38
050E:  CLRF   37
050F:  CLRF   36
0510:  MOVLW  80
0511:  MOVWF  35
0512:  GOTO   033
0513:  MOVF   7A,W
0514:  MOVWF  34
0515:  MOVF   79,W
0516:  MOVWF  33
0517:  MOVF   78,W
0518:  MOVWF  32
0519:  MOVF   77,W
051A:  MOVWF  31
051B:  MOVF   7A,W
051C:  MOVWF  41
051D:  MOVF   79,W
051E:  MOVWF  40
051F:  MOVF   78,W
0520:  MOVWF  3F
0521:  MOVF   77,W
0522:  MOVWF  3E
0523:  MOVLW  28
0524:  MOVWF  45
0525:  MOVLW  7E
0526:  MOVWF  44
0527:  MOVLW  0C
0528:  MOVWF  43
0529:  MOVLW  7A
052A:  MOVWF  42
052B:  CALL   0FF
052C:  MOVF   7A,W
052D:  MOVWF  25
052E:  MOVF   79,W
052F:  MOVWF  24
0530:  MOVF   78,W
0531:  MOVWF  23
0532:  MOVF   77,W
0533:  MOVWF  22
....................        
....................       if(aux != distancia){ 
0534:  MOVF   2D,W
0535:  MOVWF  34
0536:  MOVF   2C,W
0537:  MOVWF  33
0538:  MOVF   2B,W
0539:  MOVWF  32
053A:  MOVF   2A,W
053B:  MOVWF  31
053C:  MOVF   25,W
053D:  MOVWF  38
053E:  MOVF   24,W
053F:  MOVWF  37
0540:  MOVF   23,W
0541:  MOVWF  36
0542:  MOVF   22,W
0543:  MOVWF  35
0544:  CALL   174
0545:  BTFSC  03.2
0546:  GOTO   5C6
....................          aux = distancia-3; 
0547:  BSF    03.1
0548:  MOVF   25,W
0549:  MOVWF  34
054A:  MOVF   24,W
054B:  MOVWF  33
054C:  MOVF   23,W
054D:  MOVWF  32
054E:  MOVF   22,W
054F:  MOVWF  31
0550:  CLRF   38
0551:  CLRF   37
0552:  MOVLW  40
0553:  MOVWF  36
0554:  MOVLW  80
0555:  MOVWF  35
0556:  GOTO   1B3
0557:  MOVF   7A,W
0558:  MOVWF  2D
0559:  MOVF   79,W
055A:  MOVWF  2C
055B:  MOVF   78,W
055C:  MOVWF  2B
055D:  MOVF   77,W
055E:  MOVWF  2A
....................          printf("\r%f\n", aux); 
055F:  MOVLW  0D
0560:  BTFSS  0C.4
0561:  GOTO   560
0562:  MOVWF  19
0563:  MOVLW  89
0564:  MOVWF  04
0565:  MOVF   2D,W
0566:  MOVWF  34
0567:  MOVF   2C,W
0568:  MOVWF  33
0569:  MOVF   2B,W
056A:  MOVWF  32
056B:  MOVF   2A,W
056C:  MOVWF  31
056D:  MOVLW  02
056E:  MOVWF  35
056F:  GOTO   345
0570:  MOVLW  0A
0571:  BTFSS  0C.4
0572:  GOTO   571
0573:  MOVWF  19
....................          if(aux<=99.54 && aux>=4){ 
0574:  MOVF   2D,W
0575:  MOVWF  34
0576:  MOVF   2C,W
0577:  MOVWF  33
0578:  MOVF   2B,W
0579:  MOVWF  32
057A:  MOVF   2A,W
057B:  MOVWF  31
057C:  MOVLW  7B
057D:  MOVWF  38
057E:  MOVLW  14
057F:  MOVWF  37
0580:  MOVLW  47
0581:  MOVWF  36
0582:  MOVLW  85
0583:  MOVWF  35
0584:  CALL   174
0585:  BTFSC  03.0
0586:  GOTO   589
0587:  BTFSS  03.2
0588:  GOTO   5A2
0589:  CLRF   34
058A:  CLRF   33
058B:  CLRF   32
058C:  MOVLW  81
058D:  MOVWF  31
058E:  MOVF   2D,W
058F:  MOVWF  38
0590:  MOVF   2C,W
0591:  MOVWF  37
0592:  MOVF   2B,W
0593:  MOVWF  36
0594:  MOVF   2A,W
0595:  MOVWF  35
0596:  CALL   174
0597:  BTFSC  03.0
0598:  GOTO   59B
0599:  BTFSS  03.2
059A:  GOTO   5A2
....................             set_pwm1_duty(1023); 
059B:  MOVLW  FF
059C:  MOVWF  15
059D:  MOVF   17,W
059E:  ANDLW  CF
059F:  IORLW  30
05A0:  MOVWF  17
....................           
....................          //if(distancia != aux){ 
....................          //putc('E'); 
....................          //} 
....................          } 
05A1:  GOTO   5C6
....................          else if(aux>99.54){ 
05A2:  MOVLW  7B
05A3:  MOVWF  34
05A4:  MOVLW  14
05A5:  MOVWF  33
05A6:  MOVLW  47
05A7:  MOVWF  32
05A8:  MOVLW  85
05A9:  MOVWF  31
05AA:  MOVF   2D,W
05AB:  MOVWF  38
05AC:  MOVF   2C,W
05AD:  MOVWF  37
05AE:  MOVF   2B,W
05AF:  MOVWF  36
05B0:  MOVF   2A,W
05B1:  MOVWF  35
05B2:  CALL   174
05B3:  BTFSS  03.0
05B4:  GOTO   5BE
....................             set_pwm1_duty(0); 
05B5:  CLRF   15
....................             printf("\rTinaco vacio\n"); 
05B6:  MOVLW  04
05B7:  BSF    03.6
05B8:  MOVWF  0D
05B9:  MOVLW  00
05BA:  MOVWF  0F
05BB:  BCF    03.6
05BC:  CALL   42B
....................             //if(distancia != aux){ 
....................             //putc('A'); 
....................             //} 
....................          } 
05BD:  GOTO   5C6
....................          else{ 
....................             set_pwm1_duty(0); 
05BE:  CLRF   15
....................             printf("\rTinaco lleno\n"); 
05BF:  MOVLW  0C
05C0:  BSF    03.6
05C1:  MOVWF  0D
05C2:  MOVLW  00
05C3:  MOVWF  0F
05C4:  BCF    03.6
05C5:  CALL   42B
....................          } 
....................        
....................       } 
....................        
....................        
....................       //duty = distancia*1023/400; //Se toman 1023bit de la resolucion max con 400mts 
....................       
....................        
....................       //printf("\rDistancia = %f",distancia); 
....................       //printf("\rTiempo = %f",tiempo); 
....................        
....................       delay_ms(150); 
05C6:  MOVLW  96
05C7:  MOVWF  31
05C8:  GOTO   483
05C9:  GOTO   4D5
....................    } 
.................... } 
05CA:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
